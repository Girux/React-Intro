Para iniciar la pagina en el navegador debemos de utilizar en la consola el comando "npm start"

Metodo render que permite enviar nuestro componente en la aplicación, se pueden renderizar el mismo componente varias veces.
recibir props(propiedades) permiten cambiar el objeto de un valor fijo
<todocount
completed={3}
total={5}
/>

¿Cuándo algo es un componente y cuando un elemento?
Componente es la función, nombre que empieza por mayuscula. Reciben propiedades, no renderizan nada en el html
Los elementos viven dentro del componente y se terminan transformando en el html, parecen pero aún no lo son, solo es sintaxis que se llama jsx
------------------
Asi como las funciones reciben parametros, los componentes reciben props(objetos).
React transforma todo lo que está dentro de las etiquetas de apertura y cierre de nuestro componente lo transforma en la propiedad children. Es decir, si creamos una etiqueta de apertura y cierre y por dentro se crean más componentes o elementos que se quieran renderizar React lo transforma en la propiedad children que nosotros en el editor vamos a poder utilizar donde nosotros queramos.

Para no tener div innecesarios se puede poner lo siguiente:
    <React.Fragment></React.Fragment>
    Pero siempre que se utilice esta manera de renderizar se debe importar lo siguiente
    import React from 'react';

Para renderizar un array: Por cada objeto dentro del array se renderiza un "TodoItem"
El metodo .map crea un array a partir del array inicial

RESUMEN DE CLASE
    Componentes => Reciben Propiedades. Elementos => Reciben Atributos. ... Hay que tener en cuenta que en JSX, la sintaxis entre atributos y propiedades es muy parecida, ya que escribimos el valor de las props en los componentes como si fueran atributos, pero estos no lo son.. ... Las props son variables que declaramos en nuestro componente como si fueran parámetros de una función, podemos declarar una unica (Prop) o declarar varias Props utilizando la {Desestructuración}. Para luego posteriormente darles un valor como si fueran argumentos, pero utilizando otro tipo de sintaxis, que es muy parecida a la de los atributos de los elementos HTML, con la diferencia que el otorgamos el valor entre {llaves}. ... En cuanto a la propiedad "props.children" esta hace referencia a que React transforma automáticamente a todo lo que se encuentre dentro del componente padre en un elemento "children" , es decir todo lo que se encuentre dentro de una etiqueta de apertura <Component> y una etiqueta de cierre </Component> para React será "Children". .. Por otro lado existe <React.Fragment> o su sintaxis más corta " <> </> " que es un contenedor invisible que tiene como objetivo envolver todos los componentes JSX dentro de un contenedor padre, esto es debido a que React necesita envolver esos componentes para renderizarlos, y asi no crear nodos innecesarios en el DOM. .. Por ultimo, debemos tener en cuenta que podemos renderizar elementos a través de un Array, utilizando en este caso el metodo .map(), y devolviendo el componente "TodoItem" por cada uno de los objetos del array.. Es necesario que le pasemos las props "key={todo.text} text={todo.text}" al componente para que nos muestre un contenido distinto por cada objeto de este array. .. La prop "Key" funciona como un Identificador para objeto del array y es necesaria cuando utilizamos el metodo .map()

Para agregar estilos se debe tener una variable por fuera del componente en forma de objetos, utilizando los nombres de CSS con camelCase o directamente enviarle el objeto al componente.

Se usan las comillas invertidas junto con las llaves para indicarle a react que vamos a trabajar con codigo de js: {`${code}`}

Los estados derivados son variables/calculos que hacemos a partir de un estado(un estado puede cambiar todo el tiempo)